#!/usr/bin/env ruby

##
# Test command: 
# docker-compose down; rm -rf src; rm docker-compose.yml; rm Dockerfile-wp; wp-docker
##

require_relative "./lib/docker_manager"
require_relative "./lib/config_manager"
require_relative "./lib/commands/_loader"

require 'fileutils'

require "highline/import"

DEFAULT_WEB_PORT = 8000
DEFAULT_DB_PORT = 3306

UI_ENV_SPACES = 50
UI_WEB_SPACES = 15
UI_DB_SPACES = 15

def main 
    puts
    puts "========================================"
    puts "| WordPress Docker Environment Manager |"
    puts "========================================"
    puts

    case ARGV[0]
    when "create"
        wp_docker_create
    when "cli"
        wp_docker_execute_cli
    when "open"
        wp_docker_open_browser
    when "list"
        wp_docker_list
    when "shell"
        wp_docker_shell
    when "exec"
        wp_docker_exec
    when "start"
        wp_docker_start
    when "stop"
        wp_docker_stop
    when "remove"
        wp_docker_remove
    else
        puts "Usage wp-docker <command>"
        puts 
        puts "Commands:"        
        puts "  create                 Create new wp-docker environment"
        puts "  list                   Show available environments"
        puts "  cli <command>          Execute wp-cli in current wp-docker environment"
        puts "  open                   Open browser"
        puts "  shell                  Open shell in web container"
        puts "  exec <command>         Execute command in current wp-docker environment"
        puts "  start <environment>    Start wp-docker environment"
        puts "  stop <environment>     Stop wp-docker environment"
        puts "  remove <environment>   Remove wp-docker environment"
    end

end


def wp_docker_start
    docker_manager = DockerManager.new
    docker_manager.start ARGV[1]
end

def wp_docker_stop
    docker_manager = DockerManager.new
    docker_manager.stop ARGV[1]
end

def wp_docker_remove
    docker_manager = DockerManager.new
    docker_manager.remove ARGV[1]
end

def fill_spaces(text, chars)
    fills = chars - text.to_s.length
    return str = text + (" " * fills)

end


def docker_start port
    puts "Start docker compose"
    system "docker-compose up --build -d"
    puts
    puts "Opening browser: http://localhost:#{port}"
    print "wait ."
    sleep 5
    print "."
    sleep 5
    print "."
    sleep 5
    print "."
    sleep 5
    print "."
    system "open http://localhost:#{port}"

end

main

